name: Linux_aarch64

on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize ]


jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Create Build Environment
      run: |
        sudo dpkg --add-architecture arm64
        sudo apt-get update -y
        sudo apt-get install -y cmake file g++-multilib git libfmt-dev:arm64 libsdl2-dev:arm64 libsodium-dev:arm64 libpng-dev:arm64 libbz2-dev:arm64 rpm wget smpq  
    - name: Cache CMake build folder
      uses: actions/cache@v2
      with:
        path: build
        key: linux-arm64-cmake-v4-${{ github.sha }}
        restore-keys: linux-arm65-cmake-v4-
    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=OFF -DCPACK=ON -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_TOOLCHAIN_FILE=../CMake/platforms/aarch64.toolchain.cmake
    
    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      run: cmake --build build -j $(nproc) --target package

    - name: Package
      run: Packaging/nix/LinuxReleasePackaging.sh && Packaging/nix/AppImage.sh

    - name: Upload-Package
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v2
      with:
        name: devilutionx_linux_aarch64.tar.xz
        path: devilutionx.tar.xz

    - name: Upload-AppImage
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v2
      with:
        name: devilutionx_linux_aarch64.appimage
        path: devilutionx.appimage
        

# jobs:
#   build_job:
#     # The host should always be linux
#     runs-on: ubuntu-20.04
#     name: Build on ubuntu20.04 aarch64
    
#     steps:
#       - uses: actions/checkout@v2.1.0
#       - uses: uraimo/run-on-arch-action@v2
#         name: Build artifact
#         id: build
#         with:
#           arch: aarch64
#           distro: ubuntu20.04
#           githubToken: ${{ github.token }}
#           setup: |
#             mkdir -p "${PWD}/artifacts"
#           dockerRunArgs: |
#             --volume "${PWD}/artifacts:/artifacts"
#           env: |
#             artifact_name: devilutionx.tar.xz
#           install: |
#             apt-get update -q -y
#             apt-get install cmake g++ libsdl2-dev libsodium-dev libpng-dev libbz2-dev libgtest-dev libgmock-dev libsdl2-image-dev libfmt-dev git -q -y
#           run: |
#             cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release
#             cmake --build build -j $(getconf _NPROCESSORS_ONLN)
#             Packaging/nix/LinuxReleasePackaging.sh
#             cp devilutionx.tar.xz "${PWD}/artifacts"
#       - name: Upload Artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: devilutionx_linux_aaarch64.tar.xz
#           path: devilutionx.tar.xz
      